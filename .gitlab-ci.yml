build_image:
  only:
    - master
  # image: node:lts-slim
  stage: build
  before_script:
    - curl https://cli-assets.heroku.com/install.sh | sh
    - sed -i '/^mountopt =.*/d' /etc/containers/storage.conf
  script:
    - heroku logs --tail -a devops-httpserv-obse
# release:
#   only:
#     - master
#   image: node:10.17-alpine
#   stage: release
#   before_script:
#     - apk add curl bash
#     - curl https://cli-assets.heroku.com/install.sh | sh
#   script:
#     - heroku container:release -a heroku-app-name web
#########################3
# image: docker:latest
# services:
#   - docker:dind

# variables:
#   DOCKER_DRIVER: overlay

# stages:
#   - build

# docker-build:
#   stage: build
#   script:
#     - docker build -f Dockerfile --iidfile imageid.txt -t registry.heroku.com/my-awesome-app/my-app .
#     - docker login -u _ -p $HEROKU_TOKEN registry.heroku.com
#     - docker push registry.heroku.com/my-awesome-app/my-app
#     - apk add --no-cache curl
#     - echo "Docker Image ID is $(cat imageid.txt)"
#     - |-
#       curl -X PATCH https://api.heroku.com/apps/my-awesome-app/formation --header "Content-Type: application/json" --header "Accept: application/vnd.heroku+json; version=3.docker-releases" --header "Authorization: Bearer ${HEROKU_TOKEN}" --data '{ "updates": [ { "type": "web", "docker_image": "'$(cat imageid.txt)'" } ] }
################################333

# release:
#   only:
#     - master
#   # image: node:10.17-alpine
#   stage: release
#   before_script:
#     - apk add curl bash
#     - curl https://cli-assets.heroku.com/install.sh | sh
#   script:
#     - heroku container:release -a heroku-app-name web

# # Gitlab to heroku using docker
# We could use docker commands and curl Heroku's API as outlined here:
# https://medium.com/@nieldw/use-gitlab-ci-to-deploy-docker-images-to-heroku-4e544a3a3c38
# However for consistency (since we are using heroku cli otherwise) and to make code a bit more understandable
# let's just install Heroku CLI in our CI/CD pipeline and use already defined commands
# https://dev.to/mattdark/from-gitlab-to-heroku-with-docker-3db2

# Additional notes

# Deploying with Docker
# https://devcenter.heroku.com/categories/deploying-with-docker
# Decided to build images because cannot be bothered to pre-build and upload to cloud in CI/CD
# On Docker compose files
# https://stackoverflow.com/questions/46904060/how-to-push-docker-containers-managed-by-docker-compose-to-heroku
# Docker swarm instead of docker compose
# https://stackoverflow.com/questions/49999920/docker-compose-heroku-hostname-links-and-production-deployment
# Addon that manages the swarm
# https://devcenter.heroku.com/articles/dockhero

# == Gitlab CI/CD quickstart
# https://docs.gitlab.com/ee/ci/quick_start/README.html
# == Gitlab yml file config reference ==
# https://docs.gitlab.com/ee/ci/yaml/
# == DPL deployment tool docs ==
# https://docs.gitlab.com/ee/ci/examples/deployment/README.html
# == Based upon Gitlab Python Heroku deployment example ==
# https://docs.gitlab.com/ee/ci/examples/test-and-deploy-python-application-to-heroku.html
