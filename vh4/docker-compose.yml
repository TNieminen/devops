version: '3.2'
services:
  # This service is built only for local development. In deployed apps we use an external hostel rabbitMQ instance
  rabbit:
    image: rabbitmq:3-management # https://hub.docker.com/_/rabbitmq
    expose:
      - '5672'
    # For debugging and development to access rabbit in local network
    ports:
      - '15672:15672'
      - '5672:5672'
    networks:
      - rabbit-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://rabbit:15672']
      interval: 5s
      timeout: 3s
      retries: 3
  orig:
    build:
      # Naming standard because of Heroku
      # https://devcenter.heroku.com/articles/container-registry-and-runtime#pushing-multiple-images
      context: ./src/orig
      dockerfile: Dockerfile
    command: yarn start
    image: orig
    # The rabbit startup will take some time in which time the initializations
    # will fail, since we cannot wait for the health check to pass in
    # docker-compose version 3+ we'll just restart on failure
    restart: always
    environment:
      - ENV=development
    depends_on:
      - rabbit
    networks:
      - rabbit-network
    volumes:
      - ./src/rabbitmq:/home/node/rabbitmq
  obse:
    build:
      # Naming standard because of Heroku
      # https://devcenter.heroku.com/articles/container-registry-and-runtime#pushing-multiple-images
      context: ./src/obse
      dockerfile: Dockerfile
    command: yarn start
    image: obse
    environment:
      - ENV=development # https://docs.docker.com/compose/environment-variables/
    restart: always
    depends_on:
      - rabbit
    networks:
      - rabbit-network
    volumes:
      - data:/home/node/data/
      - ./src/rabbitmq:/home/node/rabbitmq
  imed:
    build:
      # Naming standard because of Heroku
      # https://devcenter.heroku.com/articles/container-registry-and-runtime#pushing-multiple-images
      context: ./src/imed
      dockerfile: Dockerfile
    command: yarn start
    image: imed
    restart: always
    environment:
      - ENV=development
    depends_on:
      - rabbit
    networks:
      - rabbit-network
    volumes:
      - ./src/rabbitmq:/home/node/rabbitmq
  httpserv:
    build:
      # Naming standard because of Heroku
      # https://devcenter.heroku.com/articles/container-registry-and-runtime#pushing-multiple-images
      context: ./src/httpserv
      dockerfile: Dockerfile
    command: yarn start
    image: httpserv
    environment:
      - ENV=development # https://docs.docker.com/compose/environment-variables/
    ports:
      - 8082:8082
    restart: always
    depends_on:
      - rabbit
    networks:
      - rabbit-network
    volumes:
      - data:/home/node/data/
  apigateway:
    build:
      # Naming standard because of Heroku
      # https://devcenter.heroku.com/articles/container-registry-and-runtime#pushing-multiple-images
      context: ./src/apigateway
      dockerfile: Dockerfile
    command: yarn start
    image: apigateway
    environment:
      - ENV=development # https://docs.docker.com/compose/environment-variables/
    ports:
      - 8081:8081
    restart: always
    depends_on:
      - rabbit
    networks:
      - rabbit-network
networks:
  rabbit-network:
volumes:
  data:
